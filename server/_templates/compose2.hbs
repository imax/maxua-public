<!-- server/_templates/compose2.hbs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{pageTitle}}</title>
    <link rel="icon" href="/favicon.ico" type="image/x-icon">
    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="/css/compose.css">
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
    <style>
        /* Styles for attachments */
        .attachments-container {
            margin-top: 1.5rem;
        }
        
        .attachment-drop-area {
            border: 2px dashed #ddd;
            border-radius: 8px;
            padding: 1.5rem;
            text-align: center;
            background-color: #f9f9f9;
            cursor: pointer;
            margin-bottom: 1rem;
            transition: background-color 0.2s, border-color 0.2s;
        }
        
        .attachment-drop-area:hover,
        .attachment-drop-area.dragover {
            background-color: #f0f7ff;
            border-color: #1a73e8;
        }
        
        .attachment-drop-area p {
            margin: 0 0 0.5rem 0;
            color: #666;
        }
        
        .attachment-items {
            margin-top: 1rem;
        }
        
        .attachment-item {
            border: 1px solid #eee;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 0.75rem;
            background-color: white;
            position: relative;
        }
        
        .attachment-preview {
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid #eee;
            border-radius: 4px;
            padding: 0.75rem;
            margin-bottom: 0.75rem;
            background-color: #fafafa;
        }
        
        .attachment-controls {
            display: flex;
            justify-content: flex-end;
            gap: 0.5rem;
        }
        
        .attachment-controls button {
            background-color: #f5f5f5;
            color: #666;
            border: none;
            padding: 0.4rem 0.6rem;
            border-radius: 4px;
            font-size: 0.85rem;
            cursor: pointer;
        }
        
        .attachment-controls button:hover {
            background-color: #e5e5e5;
        }
        
        .attachment-controls button.delete {
            color: #d32f2f;
        }
        
        .attachment-controls button.delete:hover {
            background-color: #ffebee;
        }
    </style>
</head>
<body>
    <main>
        {{> profile-header activePage="compose"}}

        <div class="compose-container" x-data="composeApp()">
            <div class="compose-card">
                <div class="compose-header">
                    <h2 class="compose-title">Compose a new post</h2>
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                        <p class="compose-subtitle" style="margin: 0;">Share your thoughts, ideas, or updates</p>
                    </div>
                </div>
                
                <form id="compose-form" @submit.prevent="publishPost">
                    <textarea x-model="content"
                      class="compose-textarea" 
                      placeholder="What's on your mind?"
                      @paste="handlePasteInPost($event)"
                      x-init="
                        $el.style.height = 'auto'; 
                        $el.style.height = Math.min($el.scrollHeight, 600) + 'px'
                      "
                      @input="
                        $el.style.height = 'auto'; 
                        $el.style.height = Math.min($el.scrollHeight, 600) + 'px'
                      "
                      autofocus></textarea>

                    <!-- Attachments Section -->
                    <div class="attachments-container">
                        <h3>Attachments</h3>
                        
                        <!-- Drop area / Paste zone -->
                        <div class="attachment-drop-area" 
                             @click="focusPasteArea"
                             @dragover.prevent="dragover = true"
                             @dragleave.prevent="dragover = false"
                             @drop.prevent="handleDrop"
                             :class="{ 'dragover': dragover }">
                            <p>Drag & drop rich text or click to paste</p>
                            <p style="font-size: 0.85rem;">or press Ctrl+V to paste from clipboard</p>
                            
                            <!-- Hidden textarea for paste capture -->
                            <textarea 
                                x-ref="pasteArea" 
                                @paste="handlePaste"
                                style="position: absolute; left: -9999px; width: 1px; height: 1px;">
                            </textarea>
                        </div>
                        
                        <!-- Display attachments -->
                        <div class="attachment-items" x-show="attachments.length > 0">
                            <template x-for="(attachment, index) in attachments" :key="index">
                                <div class="attachment-item">
                                    <div class="attachment-preview" x-html="sanitizeHTML(attachment.content)"></div>
                                    <div class="attachment-controls">
                                        <button type="button" @click="editAttachment(index)">Edit</button>
                                        <button type="button" class="delete" @click="removeAttachment(index)">Remove</button>
                                    </div>
                                </div>
                            </template>
                        </div>
                    </div>

                    <div class="button-row" style="margin-top: 1.5rem;">
                        <button type="submit" id="post-button" class="post-button" :disabled="publishing">
                            <span x-text="publishing ? 'Publishing...' : 'Publish'"></span>
                        </button>
                    </div>
                </form>
                
                <div 
                    x-show="statusMessage" 
                    x-text="statusMessage" 
                    :class="`status-message status-${statusType}`"
                    style="display: none;">
                </div>
            </div>
        </div>
    </main>
    
    <footer>
        &copy; 2025 Max Ischenko
    </footer>

    <script>
        function composeApp() {
            return {
                content: '',
                attachments: [],
                dragover: false,
                publishing: false,
                statusMessage: '',
                statusType: '',
                
                // Initialize
                init() {
                    // Listen for paste events on the entire document
                    document.addEventListener('paste', (e) => {
                        // Only catch global pastes if we're not focused in the main content or another input
                        if (document.activeElement !== document.querySelector('.compose-textarea') &&
                            document.activeElement.tagName !== 'INPUT' && 
                            document.activeElement.tagName !== 'TEXTAREA') {
                            this.handleGlobalPaste(e);
                        }
                    });
                },
                
                // Focus the hidden paste area
                focusPasteArea() {
                    this.$refs.pasteArea.focus();
                },
                
                // Handle paste in the hidden area
                handlePaste(e) {
                    if (e.clipboardData) {
                        // Check for HTML content
                        const html = e.clipboardData.getData('text/html');
                        if (html) {
                            e.preventDefault();
                            this.addAttachment('html', html);
                        } else {
                            // Fallback to plain text
                            const text = e.clipboardData.getData('text/plain');
                            if (text) {
                                e.preventDefault();
                                this.addAttachment('html', `<p>${text.replace(/\n/g, '</p><p>')}</p>`);
                            }
                        }
                    }
                },
                
                // Handle paste events in the main post textarea
                handlePasteInPost(e) {
                    // We don't prevent default here so normal paste still works
                    // But we check if it has HTML to optionally add as attachment
                    if (e.clipboardData) {
                        const html = e.clipboardData.getData('text/html');
                        if (html && html.includes('<')) {
                            // Ask user if they want to add as attachment instead
                            if (confirm("Add rich text as an attachment instead?")) {
                                e.preventDefault();
                                this.addAttachment('html', html);
                            }
                        }
                    }
                },
                
                // Handle global paste events
                handleGlobalPaste(e) {
                    if (e.clipboardData) {
                        const html = e.clipboardData.getData('text/html');
                        if (html) {
                            e.preventDefault();
                            this.addAttachment('html', html);
                        }
                    }
                },
                
                // Handle drag and drop
                handleDrop(e) {
                    this.dragover = false;
                    
                    // Check for HTML content in the drop data
                    if (e.dataTransfer.types.includes('text/html')) {
                        const html = e.dataTransfer.getData('text/html');
                        if (html) {
                            this.addAttachment('html', html);
                        }
                    } else if (e.dataTransfer.types.includes('text/plain')) {
                        const text = e.dataTransfer.getData('text/plain');
                        if (text) {
                            // Convert plain text to HTML paragraphs
                            this.addAttachment('html', `<p>${text.replace(/\n/g, '</p><p>')}</p>`);
                        }
                    }
                },
                
                // Add an attachment
                addAttachment(type, content) {
                    this.attachments.push({
                        type: type,
                        content: content
                    });
                },
                
                // Edit an attachment
                editAttachment(index) {
                    const newContent = prompt("Edit attachment:", this.attachments[index].content);
                    if (newContent !== null) {
                        this.attachments[index].content = newContent;
                    }
                },
                
                // Remove an attachment
                removeAttachment(index) {
                    if (confirm("Are you sure you want to remove this attachment?")) {
                        this.attachments.splice(index, 1);
                    }
                },
                
                // Basic HTML sanitizer - this should be replaced with a proper library
                sanitizeHTML(html) {
                    // This is a VERY basic sanitizer for preview only
                    // The actual sanitization should happen server-side
                    return html
                        .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
                        .replace(/on\w+="[^"]*"/g, '')
                        .replace(/on\w+='[^']*'/g, '')
                        .replace(/on\w+=\w+/g, '');
                },
                
                // Publish the post
                async publishPost() {
                    if (!this.content.trim() && this.attachments.length === 0) {
                        this.showStatus("Post must have either content or attachments", "error");
                        return;
                    }
                    
                    this.publishing = true;
                    
                    try {
                        const response = await fetch('/compose2/publish', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            credentials: 'include',
                            body: JSON.stringify({
                                content: this.content,
                                attachments: this.attachments
                            })
                        });
                        
                        const result = await response.json();
                        
                        if (response.ok) {
                            this.showStatus("Post published successfully!", "success");
                            
                            // Reset form
                            this.content = '';
                            this.attachments = [];
                            
                            // Redirect to the post after a delay
                            setTimeout(() => {
                                window.location.href = `/p/${result.id}`;
                            }, 1500);
                        } else {
                            throw new Error(result.error || "Failed to publish post");
                        }
                    } catch (error) {
                        this.showStatus(`Error: ${error.message}`, "error");
                    } finally {
                        this.publishing = false;
                    }
                },
                
                // Show status message
                showStatus(message, type = 'success') {
                    this.statusMessage = message;
                    this.statusType = type;
                    
                    if (type === 'success') {
                        setTimeout(() => {
                            this.statusMessage = '';
                        }, 3000);
                    }
                }
            };
        }
    </script>
</body>
</html>
